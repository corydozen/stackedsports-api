task create_standard_0_database: :environment do
  # Find the name of your hobby tier database.
  # This will be one of the autogenerated names from
  # Heroku, like postgresql-pointer-899183
  current = HEROKU_API_CLIENT.addon_attachment
                             .list_by_app(ENV['HEROKU_APP_NAME'])
                             .detect { |addon| addon['name'] == 'DATABASE' }
  current_name = current['addon']['name']

  # The current add-on occupying the DATABASE attachment has no
  # other attachments. In order to promote this database without
  # error, we can create a secondary attachment.
  body = {
    app: { name: ENV['HEROKU_APP_NAME'] },
    addon: { name: current_name },
    namespace: nil,
    confirm: ENV['HEROKU_APP_NAME']
  }
  HEROKU_API_CLIENT.addon_attachment.create(body)

  # Create a new standard-0 database attached to the review app
  new_leader = HEROKU_API_CLIENT.addon.create(
    ENV['HEROKU_APP_NAME'],
    plan: 'heroku-postgresql:standard-0'
  )
  new_leader_id = new_leader['id']
  new_leader_name = new_leader['name']

  # wait for it to be provisioned
  while HEROKU_API_CLIENT.addon.info(new_leader_id)['state'] == 'provisioning'
    sleep 1
  end

  # Creating a new attachment for DATABASE effectively promotes this
  # database to be the primary database for the app.
  body = {
    name: 'DATABASE',
    app: { name: ENV['HEROKU_APP_NAME'] },
    addon: { name: new_leader_name },
    namespace: nil,
    confirm: ENV['HEROKU_APP_NAME']
  }
  HEROKU_API_CLIENT.addon_attachment.create(body)

  # Copy the data from the staging environment to the review app
  staging_pg_url = HEROKU_API_CLIENT.config_var.info_for_app(ENV['HEROKU_PARENT_APP_NAME'])['DATABASE_URL']
  review_pg_url = HEROKU_API_CLIENT.config_var.info_for_app(ENV['HEROKU_APP_NAME'])['DATABASE_URL']

  system "pg_dump --no-owner #{staging_pg_url} | psql #{review_pg_url}"
end

desc 'Scale up message worker'
task create_message_worker: :environment do
  begin
    # Check current formation
    # current_formation = HEROKU_API_CLIENT.formation.list(ENV['HEROKU_APP_NAME'])
    # unless current_formation.to_s.include?('messages_worker')
    #   dyno_options = { "command" => "bundle exec sidekiq -C config/messages_sidekiq.yml", "attach" => true, "type" => "messages_worker" }
    #   # begin
    #   #   # NOTE: for testing in console...
    #   #   HEROKU_API_CLIENT.dyno.create('dev-stackedsports-api', dyno_options)
    #   # rescue Excon::Error::UnprocessableEntity => e
    #   #   p JSON.parse(e.response.data[:body])
    #   # end
    #
    #
    #     HEROKU_API_CLIENT.dyno.create(ENV['HEROKU_APP_NAME'], dyno_options)
    #
    # end
  rescue Excon::Error::UnprocessableEntity => e
    p JSON.parse(e.response.data[:body])
  end
  # HEROKU_API_CLIENT.formation.update(ENV['HEROKU_APP_NAME'], 'messages_worker', {"size" => "1X"})
end
